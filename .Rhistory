clean_check <- rbind(clean1, clean_analysis_1)
clean_check <- rbind(clean_1, clean_analysis_1)
View(clean_check)
clean_check <- clean_check %>% pivot_longer()
?pivot_longer
clean_check <- clean_check %>% pivot_wider("uuid")
View(clean_check)
clean_1 <- filter(clean, clean$uuid == "b8f0ecd4-7942-43fb-b235-90098a1d3905")
clean_analysis_1 <- filter(clean_analysis, clean_analysis$uuid == "b8f0ecd4-7942-43fb-b235-90098a1d3905")
clean_check <- rbind(clean_1, clean_analysis_1)
clean_check <- clean_check %>% pivot_wider()
View(clean_check)
?pivot_wider
longer
?pivot_longer
clean_check <- clean_check %>% pivot_longer(uuid)
View(clean_check)
View(clean_check)
clean_check <- clean_1 %>%
bind_cols(clean_analysis_1) %>%
mutate(Issue = if_else(clean_1 == clean_analys_1, "YES", "NO"))
clean_check <- clean_1 %>%
bind_cols(clean_analysis_1) %>%
mutate(Issue = if_else(clean_1 == clean_analysis_1, "YES", "NO"))
View(clean_check)
result <- sapply(clean_check,function(C) {z=C[m];z[c(TRUE,FALSE)]==z[c(FALSE,TRUE)]})
m <- combn(nrow(clean_check),2)
result <- sapply(clean_check,function(C) {z=C[m];z[c(TRUE,FALSE)]==z[c(FALSE,TRUE)]})
result
result <- sapply(clean_check,function(C) {z=C[m];z[c(TRUE,FALSE)]==z[c(FALSE,TRUE)]}) %>% as_tibble()
View(result)
count(result, value == FALSE)
count(result, value)
args(install.packages)
?install_github
rm(list = ls())
# libraries
library(tidyverse)
library(openxlsx)
library(cleaninginspectoR)
library(compareDF)
# load cleaning log sheets
cleaning_log <-"./input/HTI2002_Analysis_ICSM__R2_Jan2021_draft_to HQ.xlsx"
# load analysis files
data_analysis <-"./input/HTI2002_Analysis_ICSM__R2_Jan2021_draft_to HQ.xlsx"
sheets <- openxlsx::getSheetNames(data_analysis)
SheetList <- lapply(sheets,openxlsx::read.xlsx,xlsxFile=data_analysis)
names(SheetList) <- sheets
View(SheetList)
clean_analysis <- SheetList[[2]]
clean_log <- SheetList[[12]]
View(clean_log)
clean_log <- SheetList[[11]]
View(clean_log)
data_analysis <-"./input/HTI2002_Analysis_ICSM__R2_Jan2021_draft_to HQ.xlsx"
sheets <- openxlsx::getSheetNames(data_analysis)
SheetList <- lapply(sheets,openxlsx::read.xlsx,xlsxFile=data_analysis)
names(SheetList) <- sheets
clean_analysis <- SheetList[[2]]
clean_log <- SheetList[[11]]
issues <- inspect_all(clean_analysis)
View(issues)
data_analysis <-"./input/HTI2002_Analysis_ICSM__R2_Jan2021_draft_to HQ.xlsx"
sheets <- openxlsx::getSheetNames(data_analysis)
SheetList <- lapply(sheets,openxlsx::read.xlsx,xlsxFile=data_analysis)
names(SheetList) <- sheets
clean_analysis <- SheetList[[2]]
clean_log <- SheetList[[11]]
issues <- inspect_all(clean_analysis)
issues <- inspect_all(clean_analysis) %>% left_join(., clean_analysis, "index")
View(issues)
issues <- inspect_all(clean_analysis) %>% filter(!is.na("index"))
View(issues)
View(issues)
issues <- inspect_all(clean_analysis) %>% filter(!is.na(index))
View(issues)
issues <- inspect_all(clean_analysis) %>% filter(!is.na(index)) %>% left_join(., clean_analysis, "index")
clean_analysis_red <- select(index, uuid)
View(clean_analysis)
data_analysis <-"./input/HTI2002_Analysis_ICSM__R2_Jan2021_draft_to HQ.xlsx"
sheets <- openxlsx::getSheetNames(data_analysis)
SheetList <- lapply(sheets,openxlsx::read.xlsx,xlsxFile=data_analysis)
names(SheetList) <- sheets
clean_analysis <- SheetList[[2]]
clean_log <- SheetList[[11]]
issues <- inspect_all(clean_analysis) %>% filter(!is.na(index))
clean_analysis_red <- select(clean_analysis, c(index, uuid))
clean_analysis_red <- select(clean_analysis, c("index", "uuid"))
data_analysis <-"./input/HTI2002_Analysis_ICSM__R2_Jan2021_draft_to HQ.xlsx"
sheets <- openxlsx::getSheetNames(data_analysis)
SheetList <- lapply(sheets,openxlsx::read.xlsx,xlsxFile=data_analysis)
names(SheetList) <- sheets
clean_analysis <- SheetList[[2]]
clean_log <- SheetList[[11]]
issues <- inspect_all(clean_analysis) %>% filter(!is.na(index))
View(clean_analysis)
clean_analysis_red <- select(clean_analysis, c("index", "UUD"))
clean_analysis_red <- select(clean_analysis, c("index", "UUID"))
issues <- left_join(issues, clean_analysis, "index")
View(issues)
issues <- left_join(issues, clean_analysis_red, "index")
data_analysis <-"./input/HTI2002_Analysis_ICSM__R2_Jan2021_draft_to HQ.xlsx"
sheets <- openxlsx::getSheetNames(data_analysis)
SheetList <- lapply(sheets,openxlsx::read.xlsx,xlsxFile=data_analysis)
names(SheetList) <- sheets
clean_analysis <- SheetList[[2]]
clean_log <- SheetList[[11]]
issues <- inspect_all(clean_analysis) %>% filter(!is.na(index))
clean_analysis_red <- select(clean_analysis, c("index", "UUID"))
issues <- left_join(issues, clean_analysis_red, "index")
View(issues)
write.xlsx(issues, paste0("./output/cleaning_issues_",lubridate::today(),".xlsx"))
View(clean_log)
sheets <- openxlsx::getSheetNames(data_analysis)
SheetList <- lapply(sheets,openxlsx::read.xlsx,xlsxFile=data_analysis)
names(SheetList) <- sheets
clean_analysis <- SheetList[[2]]
clean_log <- SheetList[[11]]
View(clean_log)
rm(list = ls())
# libraries
library(tidyverse)
library(openxlsx)
library(cleaninginspectoR)
library(compareDF)
sheets <- openxlsx::getSheetNames(data)
SheetList <- lapply(sheets,openxlsx::read.xlsx,xlsxFile=data)
# load analysis files
data <-"./input/ICSM_R3_QuickSheets_Data_Cleaning_to HQ.xlsm"
sheets <- openxlsx::getSheetNames(data)
SheetList <- lapply(sheets,openxlsx::read.xlsx,xlsxFile=data)
names(SheetList) <- sheets
View(SheetList)
clean <- SheetList[[2]]
clean_log <- SheetList[[3]]
issues <- inspect_all(clean) %>% filter(!is.na(index))
View(issues)
clean_red <- select(clean_analysis, c("index", "uuid"))
clean_red <- select(clean, c("index", "uuid"))
issues <- left_join(issues, cleans_red, "index")
View(clean)
clean_red <- select(clean, c("index", "_uuid"))
issues <- left_join(issues, cleans_red, "index")
clean_red <- select(clean, c("_index", "_uuid"))
View(issues)
issues <- left_join(issues, cleans_red, c("index" = "_index"))
issues <- left_join(issues, clean_red, c("index" = "_index"))
View(issues)
write.xlsx(issues, paste0("./output/cleaning_issues_",lubridate::today(),".xlsx"))
issue_yes <- anti_join(clean_log, issues, "uuid")
View(clean_log)
View(issues)
issue_yes <- anti_join(clean_log, issues, c("uuid"= "_uuid"))
View(issues)
issues <- inspect_all(clean) %>% filter(!is.na(index))
clean_red <- select(clean, c("_index", "_uuid"))
issues <- left_join(issues, clean_red, c("index" = "_index"))
View(clean_log)
del <- SheetList[[4]]
# check deletion
delc <- anti_join(del, clean, c("uuid" = "_uuid")
# check deletion
delc <- anti_join(del, clean, c("uuid" = "_uuid"))
# check deletion
delc <- anti_join(del, clean, c("uuid" = "_uuid"))
View(clean)
View(del)
# check deletion
delc <- anti_join(del, clean, "_uuid")
# check deletion
delc <- anti_join(clean, del, "_uuid")
# check deletion
delc <- anti_join(del, clean, "_uuid") ## tutti e due ok
# check if issues are cleaned already
cleanc <- anti_join(issues, clean, c("uuid"="_uuid"))
View(issues)
View(clean)
# check if issues are cleaned already
cleanc <- anti_join(issues, clean, "_uuid")
View(cleanc)
# check issues
issues <- inspect_all(clean) %>% filter(!is.na(index))
clean_red <- select(clean, c("_index", "_uuid"))
issues <- left_join(issues, clean_red, c("index" = "_index"))
write.xlsx(issues, paste0("./output/cleaning_issues_",lubridate::today(),".xlsx"))
# check if issues are cleaned already
cleanc <- anti_join(issues, clean, "_uuid")
# check deletion
delc <- anti_join(del, clean, "_uuid") ## tutti e due ok
View(cleanc)
# check issues
issues <- inspect_all(clean) %>% filter(!is.na(index))
clean_red <- select(clean, c("_index", "_uuid"))
View(clean_red)
issues <- left_join(issues, clean_red, c("index" = "_index"))
View(issues)
write.xlsx(issues, paste0("./output/cleaning_issues_",lubridate::today(),".xlsx"))
# check if issues are cleaned already
cleanc <- anti_join(issues, clean, "_uuid")
View(cleanc)
rm(list = ls())
# libraries
library(tidyverse)
library(openxlsx)
library(cleaninginspectoR)
library(arsenal)
# load analysis files
data <-"./input/ICSM_R4_Data_Cleaning_To_HQ_v1.xlsm"
sheets <- openxlsx::getSheetNames(data)
SheetList <- lapply(sheets,openxlsx::read.xlsx,xlsxFile=data)
names(SheetList) <- sheets
View(SheetList)
# load analysis files
data <-"./input/ICSM_R4_Data_Cleaning_To_HQ_v1.xlsm"
sheets <- openxlsx::getSheetNames(data)
SheetList <- lapply(sheets,openxlsx::read.xlsx,xlsxFile=data)
names(SheetList) <- sheets
clean <- SheetList[[2]]
# check issues
issues <- inspect_all(clean) %>% filter(!is.na(index))
View(issues)
# check issues
issues <- inspect_all(clean)
View(issues)
# check falsification
tool <- read.xlsx("./input/REACH_HTI_Tool_ICSM_R04.18.xls")
source("./data_falsification.R")
test <- calculateDifferences(clean, tool)
# check falsification
tool <- read.xlsx("./input/REACH_HTI_Tool_ICSM_R04.18.xlsx")
test <- calculateDifferences(clean, tool)
library(cluster)
test <- calculateDifferences(clean, tool)
View(test)
test <- calculateEnumeratorSimilarity(clean, tool, "emqueteur")
test <- calculateEnumeratorSimilarity(clean, tool, "enqueteur")
View(test)
test2 <- calculateEnumeratorSimilarity(clean, tool, "enqueteur", "q04_departement")
View(tool)
test2 <- calculateEnumeratorSimilarity(clean, tool, "enqueteur", "q04_departement")
test2 <- calculateEnumeratorSimilarity(clean, tool, "q03_enqueteur", "q04_departement")
View(test2)
write.xlsx(test, paste0("./output/jmmi_r4_survey differences,",lubridate::today(),".xlsx"))
write.xlsx(test2, paste0("./output/jmmi_r4_enumerator falsification_",lubridate::today()".xlsx"))
write.xlsx(test, paste0("./output/jmmi_r4_survey differences_",lubridate::today(),".xlsx"))
write.xlsx(test2, paste0("./output/jmmi_r4_enumerator falsification_",lubridate::today(),".xlsx"))
rm(list = ls())
# libraries
library(tidyverse)
library(openxlsx)
library(cleaninginspectoR)
library(arsenal)
library(cluster)
source("./data_falsification.R")
# load analysis files
data <-"./input/HTI2002_ICSM_R5_Dataset_to HQ.xlsm"
sheets <- openxlsx::getSheetNames(data)
SheetList <- lapply(sheets,openxlsx::read.xlsx,xlsxFile=data)
names(SheetList) <- sheets
clean <- SheetList[[2]]
clean_log <- SheetList[[3]]
del <- SheetList[[4]]
View(clean)
View(SheetList)
raw <- SheetList[[1]]
View(raw)
rm(list = ls())
# libraries
library(tidyverse)
library(openxlsx)
library(cleaninginspectoR)
library(arsenal)
library(cluster)
source("./data_falsification.R")
# load analysis files
data <-"./input/HTI2002_ICSM_R5_Dataset_to HQ.xlsm"
sheets <- openxlsx::getSheetNames(data)
SheetList <- lapply(sheets,openxlsx::read.xlsx,xlsxFile=data)
names(SheetList) <- sheets
raw <- SheetList[[1]]
clean <- SheetList[[2]]
clean_log <- SheetList[[3]]
del <- SheetList[[4]]
# check issues
issues <- inspect_all(clean) %>% filter(!is.na(index))
View(issues)
View(clean)
clean_red <- select(clean, c("_index", "uuid"))
issues <- left_join(issues, clean_red, c("index" = "_index"))
write.xlsx(issues, paste0("./output/cleaning_issues_",lubridate::today(),".xlsx"))
# check if issues are cleaned already
cleanc <- anti_join(issues, clean, "uuid")
# check deletion
delc <- anti_join(del, clean, "uuid") ## tutti e due ok
# check deletion
delc <- semi_join(del, clean, "uuid") ## tutti e due ok
# check falsification
tool <- read.xlsx("./input/REACH_HTI_Tool_ICSM_R5_VF.xlsx")
test <- calculateDifferences(clean, tool)
# check falsification
tool <- read.xlsx("./input/REACH_HTI_Tool_ICSM_R5_VF.xls")
# check falsification
tool <- read.xlsx("./input/REACH_HTI_Tool_ICSM_R5_VF.xls")
# check falsification
tool <- read.xlsx("./input/REACH_HTI_Tool_ICSM_R5_VF.xlsx")
test <- calculateDifferences(clean, tool)
View(test)
test2 <- calculateEnumeratorSimilarity(raw, tool, "q03_enqueteur", "q04_departement")
View(raw)
test2 <- calculateEnumeratorSimilarity(raw, tool, "q03_enqueteur", "commune")
View(raw)
View(tool)
# ANALYSIS
rm(list = ls())
# libraries
library(tidyverse)
library(openxlsx)
# load analysis files
data <-"./input/REACH_HTI_2002_ICSM_Dataset_Analysis_R5_to HQ.xlsx"
sheets <- openxlsx::getSheetNames(data)
SheetList <- lapply(sheets,openxlsx::read.xlsx,xlsxFile=data)
names(SheetList) <- sheets
View(SheetList)
data <- SheetList[[3]]
View(data)
medians <- data %>% select("commune", ends_with("_prix")) %>%
group_by(commune) %>%
summarise_all(funs(median(., na.rm = TRUE)))
View(medians)
View(medians)
rm(list = ls())
# libraries
library(tidyverse)
library(openxlsx)
library(cleaninginspectoR)
library(arsenal)
library(cluster)
source("./data_falsification.R")
source("./check_log.R")
# load analysis files
data <-"./input/HTI_2002_Data_Cleaning_ICSM_R6_to HQ.xlsm"
sheets <- openxlsx::getSheetNames(data)
SheetList <- lapply(sheets,openxlsx::read.xlsx,xlsxFile=data)
names(SheetList) <- sheets
View(SheetList)
raw <- SheetList[[1]]
clean <- SheetList[[2]]
clean_log <- SheetList[[3]]
del <- SheetList[[4]]
View(clean)
# check issues
issues <- inspect_all(clean) %>% filter(!is.na(index))
View(issues)
names(clean)[names(clean) == "_uuid"] <- "uuid"
View(clean_log)
rm(list = ls())
# libraries
library(tidyverse)
library(openxlsx)
library(cleaninginspectoR)
library(arsenal)
library(cluster)
source("./data_falsification.R")
source("./check_log.R")
# load analysis files
data <-"./input/HTI_2002_Data_Cleaning_ICSM_R6_to HQ.xlsm"
sheets <- openxlsx::getSheetNames(data)
SheetList <- lapply(sheets,openxlsx::read.xlsx,xlsxFile=data)
names(SheetList) <- sheets
raw <- SheetList[[1]]
clean <- SheetList[[2]]
names(clean)[names(clean) == "_uuid"] <- "uuid"
clean_log <- SheetList[[3]]
del <- SheetList[[4]]
names(del)[names(del) == "_uuid"] <- "uuid"
# check if cleaning log has been applied
clean.c <- check_log(clean, clean_log)
# check if cleaning log has been applied
clean_log <- clean_log %>% filter(question.name %in% names(clean))
clean.c <- check_log(clean, clean_log)
View(clean_log)
View(clean.c)
clean.c <- clean.c %>% mutate(check = ifelse(new.value == value_extracted, "Log applied correctly", "Please check log")) %>%
filter(check == "Please check log")
View(clean.c)
write.xlsx(clean.c, paste0("./output/cleaning process_",lubridate::today(),".xlsx"))
# check deletion
delc <- semi_join(del, clean, "uuid") ## tutti e due ok
# check falsification
tool <- read.xlsx("./input/REACH_HTI_Tool_ICSM_R6_vf.xls")
test <- calculateDifferences(clean, tool)
# check falsification
tool <- read.xlsx("./input/REACH_HTI_Tool_ICSM_R6_vf.xlsx")
similar.surveys <- calculateDifferences(clean, tool)
View(similar.surveys)
similar.surveys <- similar.surveys %>% filter(number.different.columns < 5)
write.xlsx(similar.surveys, paste0("./output/enumerator falsification_",lubridate::today(),".xlsx"))
View(raw)
enum.false <- calculateEnumeratorSimilarity(raw, tool, "q03_enqueteur", "commune")
View(raw)
raw$survey_time <- NULL
enum.false <- calculateEnumeratorSimilarity(raw, tool, "q03_enqueteur", "commune")
View(tool)
raw$nom_ong
enum.false <- calculateEnumeratorSimilarity(raw, tool, "q03_enqueteur", "commune")
rm(list = ls())
# libraries
library(tidyverse)
library(openxlsx)
library(cleaninginspectoR)
library(arsenal)
library(cluster)
source("./data_falsification.R")
source("./check_log.R")
# load analysis files
data <-"./input/HTI2002_Data_Cleaning_R7.xlsm"
sheets <- openxlsx::getSheetNames(data)
SheetList <- lapply(sheets,openxlsx::read.xlsx,xlsxFile=data)
names(SheetList) <- sheets
clean <- SheetList[[2]]
names(clean)[names(clean) == "_uuid"] <- "uuid"
clean_log <- SheetList[[3]]
del <- SheetList[[4]]
names(del)[names(del) == "_uuid"] <- "uuid"
# check issues
issues <- inspect_all(clean) %>% filter(!is.na(index))
clean <- SheetList[[2]]
# load analysis files
data <-"./input/HTI2002_Data_Cleaning_R7.xlsm"
sheets <- openxlsx::getSheetNames(data)
SheetList <- lapply(sheets,openxlsx::read.xlsx,xlsxFile=data)
names(SheetList) <- sheets
# load analysis files
data <-"./input/HTI2002_Data_Cleaning_R7.xlsx"
sheets <- openxlsx::getSheetNames(data)
SheetList <- lapply(sheets,openxlsx::read.xlsx,xlsxFile=data)
names(SheetList) <- sheets
raw <- SheetList[[1]]
clean <- SheetList[[2]]
names(clean)[names(clean) == "_uuid"] <- "uuid"
clean_log <- SheetList[[3]]
del <- SheetList[[4]]
names(del)[names(del) == "_uuid"] <- "uuid"
# check issues
issues <- inspect_all(clean) %>% filter(!is.na(index))
clean_red <- select(clean, c("_index", "uuid"))
issues <- left_join(issues, clean_red, c("index" = "_index"))
write.xlsx(issues, paste0("./output/cleaning_issues_",lubridate::today(),".xlsx"))
# check if cleaning log has been applied
clean_log <- clean_log %>% filter(question.name %in% names(clean))
clean.c <- check_log(clean, clean_log)
View(clean)
View(clean_log)
# check if cleaning log has been applied
clean_log <- clean_log %>% filter(question.name %in% names(clean))
clean.c <- check_log(clean, clean_log)
clean.c <- check_log(data = clean, log = clean_log,variable = "question.name", old_log_var = "old.value", new_log_var = "new.value")
# check if cleaning log has been applied
clean_log <- clean_log %>% filter(clean_log$question.name %in% names(clean))
clean.c <- check_log(data = clean, log = clean_log,variable = "question.name", old_log_var = "old.value", new_log_var = "new.value")
View(check_log)
source("./data_falsification.R")
source("./check_log.R")
View(clean_log)
# check deletion
delc <- semi_join(del, clean, "uuid") ## tutti e due ok
# check falsification
tool <- read.xlsx("./input/HTI2002_Data_Cleaning_R7.xlsx")
similar.surveys <- calculateDifferences(clean, tool)
View(tool)
View(SheetList)
# check falsification
tool <- SheetList[["Kobo survey"]]
similar.surveys <- calculateDifferences(clean, tool)
similar.surveys <- similar.surveys %>% filter(number.different.columns < 5)
write.xlsx(similar.surveys, paste0("./output/enumerator falsification_",lubridate::today(),".xlsx"))
clean <- SheetList[["Clean Data"]]
names(clean)[names(clean) == "_uuid"] <- "uuid"
clean_log <- SheetList[["Cleaning Log"]]
del <- SheetList[["Deletions"]]
names(del)[names(del) == "_uuid"] <- "uuid"
# check issues
issues <- inspect_all(clean) %>% filter(!is.na(index))
# check if cleaning log has been applied
clean_log <- clean_log %>% filter(clean_log$question.name %in% names(clean))
clean.c <- check_log(data = clean, log = clean_log,
variable = "question.name",
old_log_var = "old.value",
new_log_var = "new.value")
View(clean)
View(clean_log)
# check if cleaning log has been applied
clean_log <- clean_log %>% filter(question.name %in% names(clean))
clean.c <- check_log(data = clean, log = clean_log,
variable = "question.name",
old_log_var = "old.value",
new_log_var = "new.value")
clean_log <- clean_log %>% filter(uuid %in% clean$uuid)
clean.c <- check_log(data = clean, log = clean_log,
variable = "question.name",
old_log_var = "old.value",
new_log_var = "new.value")
clean.c <- clean.c %>% mutate(check = ifelse(new.value == value_extracted, "Log applied correctly", "Please check log")) %>%
filter(check == "Please check log")
write.xlsx(clean.c, paste0("./output/cleaning process_",lubridate::today(),".xlsx"))
# check deletion
delc <- semi_join(del, clean, "uuid") ## tutti e due ok
# check falsification
tool <- SheetList[["Kobo survey"]]
similar.surveys <- calculateDifferences(clean, tool)
similar.surveys <- similar.surveys %>% filter(number.different.columns < 5)
write.xlsx(similar.surveys, paste0("./output/enumerator falsification_",lubridate::today(),".xlsx"))
